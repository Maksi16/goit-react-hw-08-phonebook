{"version":3,"file":"static/js/39.3a0a5ed8.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\n\nexport const selectValue = state => state.filters.text;\n\nexport const selectLoading = state => state.contacts.isLoading;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 300px;\n  margin-right: auto;\n  margin-left: auto;\n  padding: 16px;\n  text-align: center;\n  border: 1px solid black;\n  background-color: #dddbda;\n`;\n\nexport const Label = styled.label`\n  display: grid;\n  justify-items: center;\n  font-size: 18px;\n  font-weight: 500;\n  margin-bottom: 24px;\n`;\n\nexport const Input = styled.input`\n  width: 200px;\n  height: 24px;\n  margin-top: 8px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  :hover {\n    border-color: green;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 4px;\n  border: 1px solid grey;\n  background-color: transparent;\n  border-radius: 4px;\n  box-shadow: 5px 3px 3px black;\n  cursor: pointer;\n  :hover {\n    scale: 1.1;\n    background-color: grey;\n    color: white;\n  }\n`;\nexport const Box = styled.div`\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Label, Form, Input, Button, Box } from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { toast } from 'react-toastify';\n\nexport const ContactForm = () => {\n  const idName = nanoid(5);\n  const idNumber = nanoid(5);\n  const { contacts } = useSelector(selectContacts);\n  const [name, setNameForm] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handlerChangName = e => {\n    setNameForm(e.target.value);\n  };\n  const handlerChangNumber = e => {\n    setNumber(e.target.value);\n  };\n  const handlerSubmit = e => {\n    e.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      toast.error(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n  const reset = () => {\n    setNameForm('');\n    setNumber('');\n  };\n\n  return (\n    <Box>\n      <Form onSubmit={handlerSubmit}>\n        <Label>\n          Name\n          <Input\n            id={idName}\n            type=\"text\"\n            name=\"name\"\n            onChange={handlerChangName}\n            value={name}\n            placeholder=\"Enter a name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label htmlFor=\"\">\n          Number\n          <Input\n            id={idNumber}\n            type=\"tel\"\n            name=\"number\"\n            onChange={handlerChangNumber}\n            value={number}\n            placeholder=\"Enter a phone number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Box>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: grid;\n  justify-items: center;\n  font-weight: 500;\n`;\nexport const Input = styled.input`\n  width: 200px;\n  height: 24px;\n  margin-top: 8px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  :hover {\n    border-color: green;\n  }\n`;\n","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { Label, Input } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectValue } from 'redux/contacts/selectors';\nimport { setTextFilter } from 'redux/contacts/slice';\n\nexport const Filter = () => {\n  const value = useSelector(selectValue);\n  const dispatch = useDispatch();\n\n  const filterContact = e => {\n    dispatch(setTextFilter(e.currentTarget.value));\n  };\n\n  const idFilter = nanoid(5);\n\n  return (\n    <Label htmlFor={idFilter}>\n      Find contacts by name\n      <Input\n        id={idFilter}\n        type=\"text\"\n        placeholder=\"Enter a name\"\n        value={value}\n        onChange={filterContact}\n      />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  width: 350px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 1px dashed grey;\n`;\nexport const Button = styled.button`\n  margin-left: 12px;\n  border: 1px solid grey;\n  background-color: transparent;\n  border-radius: 4px;\n  box-shadow: 5px 3px 3px black;\n  cursor: pointer;\n  :hover {\n    scale: 1.1;\n    background-color: grey;\n    color: white;\n  }\n`;\n","import React from 'react';\nimport { List, Item, Button } from './ContactList.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectValue } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const { contacts, isLoading, error } = useSelector(selectContacts);\n  const filter = useSelector(selectValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const normalized = filter.toLocaleLowerCase();\n  const contactsFilter = contacts?.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalized)\n  );\n\n  const contactsState = contactsFilter.sort((firstContact, secondContact) =>\n    firstContact.name.localeCompare(secondContact.name)\n  );\n\n  return (\n    <List>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {contacts &&\n        contactsState.map(({ id, name, number }) => (\n          <Item key={id}>\n            <p>\n              {name} : {number}\n            </p>\n            <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              Delete\n            </Button>\n          </Item>\n        ))}\n    </List>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectValue","filters","text","selectLoading","isLoading","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","styled","Label","Input","Button","Box","ContactForm","idName","idNumber","useSelector","useState","name","setNameForm","number","setNumber","dispatch","useDispatch","reset","onSubmit","e","preventDefault","find","contact","toLowerCase","toast","addContact","type","onChange","target","value","placeholder","pattern","title","required","htmlFor","Filter","idFilter","setTextFilter","currentTarget","List","Item","ContactList","error","filter","useEffect","fetchContacts","normalized","toLocaleLowerCase","contactsState","includes","sort","firstContact","secondContact","localeCompare","Loader","map","onClick","deleteContact","Contacts"],"sourceRoot":""}